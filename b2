blueprint:
  name: Gestion automatisée des climatiseurs par saison et température
  description: >
    Automatise la gestion des climatiseurs selon la saison, les plages horaires, 
    et les températures mesurées à l'intérieur et à l'extérieur.
    Active également un mode humide si l'humidité mesurée sort des seuils définis.
    Permet de configurer un comportement spécifique pour la semaine ou le week-end.
  domain: automation

  input:
    # -- ENTITÉS ET CAPTEURS --
    climatiseur:
      name: Climatiseur
      description: Entité du climatiseur à contrôler.
      selector:
        entity:
          domain: climate

    temperature_interieur:
      name: Capteur de température intérieure
      description: Entité mesurant la température intérieure.
      selector:
        entity:
          domain: sensor
          device_class: temperature

    temperature_exterieur:
      name: Capteur de température extérieure
      description: Entité mesurant la température extérieure.
      selector:
        entity:
          domain: sensor
          device_class: temperature

    humidite_interieur:
      name: Capteur d'humidité intérieure
      description: Entité mesurant l'humidité intérieure.
      selector:
        entity:
          domain: sensor
          device_class: humidity

    # -- MODE ET SAISON --
    saison:
      name: Saison actuelle
      description: Sélection de la saison pour les réglages
      selector:
        select:
          options:
            - printemps
            - ete
            - automne
            - hiver

    mode_climatisation:
      name: Mode de climatisation
      description: Mode de fonctionnement du climatiseur selon la saison
      selector:
        select:
          options:
            - heat
            - cool
            - auto

    temperature_cible:
      name: Température cible
      description: Température à maintenir pour la saison
      selector:
        number:
          min: 18
          max: 26
          step: 0.5
          unit_of_measurement: °C

    # -- PLAGES HORAIRES --
    heure_debut_jour:
      name: Heure de début de la journée
      description: Heure de début des plages horaires de jour.
      selector:
        time:

    heure_fin_jour:
      name: Heure de fin de la journée
      description: Heure de fin des plages horaires de jour.
      selector:
        time:

    # -- PARAMÈTRES DIVERS --
    seuil_tolerance:
      name: Seuil de tolérance
      description: Marge autour de la température cible pour ajuster la climatisation.
      selector:
        number:
          min: 0
          max: 3
          step: 0.5
          unit_of_measurement: °C

    temperature_max_preservation:
      name: Température max tolérée - Mode préservation
      description: Température maximale à ne pas dépasser en mode préservation.
      selector:
        number:
          min: 20
          max: 30
          step: 0.5
          unit_of_measurement: °C

    humidite_min:
      name: Humidité minimale
      description: Seuil d'humidité minimal avant d'activer le mode humide.
      selector:
        number:
          min: 40
          max: 50
          step: 2.5
          unit_of_measurement: "%"

    humidite_max:
      name: Humidité maximale
      description: Seuil d'humidité maximal avant d'activer le mode humide.
      selector:
        number:
          min: 60
          max: 70
          step: 2.5
          unit_of_measurement: "%"

    mode_semaine_weekend:
      name: Mode semaine ou week-end
      description: Applique des réglages spécifiques pour la semaine (lundi-vendredi) ou le week-end (samedi-dimanche).
      selector:
        select:
          options:
            - semaine
            - weekend

mode: single

trigger:
  - platform: state
    entity_id: !input temperature_interieur
  - platform: state
    entity_id: !input humidite_interieur
  - platform: time_pattern
    minutes: "/30"

condition:
  - condition: template
    value_template: >-
      {% if !input mode_semaine_weekend == 'semaine' %}
        {{ now().weekday() in [0,1,2,3,4] }}
      {% else %}
        {{ now().weekday() in [5,6] }}
      {% endif %}

action:
  - variables:
      saison: "{{ !input saison }}"
      mode_actuel: "{{ !input mode_climatisation }}"
      temperature_cible: "{{ !input temperature_cible }}"

      temperature_interieure: "{{ states(!input temperature_interieur) | float }}"
      temperature_exterieure: "{{ states(!input temperature_exterieur) | float }}"
      humidite_interieure: "{{ states(!input humidite_interieur) | float }}"

      temperature_min: >-
        {{ temperature_cible | float - (!input seuil_tolerance | float) }}
      temperature_max: >-
        {{ temperature_cible | float + (!input seuil_tolerance | float) }}

  - choose:
      # 1. Si humidité hors limites -> mode dry
      - conditions:
          - condition: template
            value_template: >-
              {{ 
                humidite_interieure < (!input humidite_min | float) or 
                humidite_interieure > (!input humidite_max | float)
              }}
        sequence:
          - service: climate.set_hvac_mode
            data:
              entity_id: !input climatiseur
              hvac_mode: "dry"

      # 2. Si température intérieure hors limites -> ajustement
      - conditions:
          - condition: template
            value_template: >-
              {{ 
                temperature_interieure > temperature_max | float or 
                temperature_interieure < temperature_min | float
              }}
        sequence:
          - service: climate.set_hvac_mode
            data:
              entity_id: !input climatiseur
              hvac_mode: "{{ mode_actuel }}"
          - service: climate.set_temperature
            data:
              entity_id: !input climatiseur
              temperature: "{{ temperature_eco | float }}"

      # 3. Si température extérieure très élevée -> mode préservation
      - conditions:
          - condition: template
            value_template: >-
              {{ temperature_exterieure > (temperature_cible | float + 7) }}
        sequence:
          - service: climate.set_hvac_mode
            data:
              entity_id: !input climatiseur
              hvac_mode: "cool"
          - service: climate.set_temperature
            data:
              entity_id: !input climatiseur
              temperature: >
                {{ [ (temperature_exterieure | float - 7), (!input temperature_max_preservation | float) ] | min }}

        # 4. Zone de confort -> arrêt
        - conditions:
            - condition: template 
              value_template: >-
                {{ 
                  (humidite_interieure >= (!input humidite_min | float) + 2.5)
                  and (humidite_interieure <= (!input humidite_max | float) - 2.5)
                  and (temperature_interieure >= temperature_min | float)
                  and (temperature_interieure <= temperature_max | float)
                }}
              sequence:
                - service: climate.set_hvac_mode
                  data:
                    entity_id: !input climatiseur
                    hvac_mode: "off"
