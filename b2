blueprint:
  name: Gestion automatisée des climatiseurs par saison et température
  description: >
    Automatise la gestion des climatiseurs selon la saison, les plages horaires, 
    et les températures mesurées à l'intérieur et à l'extérieur.
    Active un mode humide si l'humidité mesurée sort des seuils définis.
    Configure des comportements spécifiques pour la semaine ou le week-end.
  domain: automation

  input:
    climatiseur:
      name: Climatiseur
      description: Entité du climatiseur à contrôler.
      selector:
        entity:
          domain: climate

    temperature_interieur:
      name: Capteur de température intérieure
      description: Entité mesurant la température intérieure.
      selector:
        entity:
          domain: sensor
          device_class: temperature

    temperature_exterieur:
      name: Capteur de température extérieure
      description: Entité mesurant la température extérieure.
      selector:
        entity:
          domain: sensor
          device_class: temperature

    humidite_interieur:
      name: Capteur d'humidité intérieure
      description: Entité mesurant l'humidité intérieure.
      selector:
        entity:
          domain: sensor
          device_class: humidity

    saison:
      name: Saison actuelle
      description: Saison pour configurer les modes.
      selector:
        select:
          options:
            - printemps
            - ete
            - automne
            - hiver

    mode_climatisation:
      name: Mode de climatisation
      description: Mode de fonctionnement selon la saison.
      selector:
        select:
          options:
            - heat
            - cool
            - auto

    temperature_cible:
      name: Température cible
      description: Température à maintenir.
      selector:
        number:
          min: 18
          max: 26
          step: 0.5
          unit_of_measurement: °C

    heure_debut_jour:
      name: Heure de début de la journée
      selector:
        time:

    heure_fin_jour:
      name: Heure de fin de la journée
      selector:
        time:

    seuil_tolerance:
      name: Seuil de tolérance
      description: Marge autour de la température cible.
      selector:
        number:
          min: 0
          max: 3
          step: 0.5
          unit_of_measurement: °C

    temperature_max_preservation:
      name: Température max tolérée
      selector:
        number:
          min: 20
          max: 30
          step: 0.5
          unit_of_measurement: °C

    humidite_min:
      name: Humidité minimale
      selector:
        number:
          min: 40
          max: 50
          step: 2.5
          unit_of_measurement: "%"

    humidite_max:
      name: Humidité maximale
      selector:
        number:
          min: 60
          max: 70
          step: 2.5
          unit_of_measurement: "%"

    mode_semaine_weekend:
      name: Mode semaine ou week-end
      selector:
        select:
          options:
            - semaine
            - weekend

mode: single

trigger:
  - platform: state
    entity_id: !input temperature_interieur
  - platform: state
    entity_id: !input humidite_interieur
  - platform: time_pattern
    minutes: "/30"

variables:
  saison: !input saison
  mode_actuel: !input mode_climatisation
  temperature_cible: !input temperature_cible
  temperature_interieure: "{{ states(!input temperature_interieur) | float }}"
  temperature_exterieure: "{{ states(!input temperature_exterieur) | float }}"
  humidite_interieure: "{{ states(!input humidite_interieur) | float }}"
  temperature_min: "{{ temperature_cible | float - (!input seuil_tolerance | float) }}"
  temperature_max: "{{ temperature_cible | float + (!input seuil_tolerance | float) }}"

condition:
  - condition: template
    value_template: >-
      {% if mode_semaine_weekend == 'semaine' %}
        {{ now().weekday() in [0, 1, 2, 3, 4] }}
      {% else %}
        {{ now().weekday() in [5, 6] }}
      {% endif %}

action:
  - choose:
      - conditions:
          - condition: template
            value_template: >-
              {{
                humidite_interieure < (!input humidite_min | float) or 
                humidite_interieure > (!input humidite_max | float)
              }}
        sequence:
          - service: climate.set_hvac_mode
            data:
              entity_id: !input climatiseur
              hvac_mode: "dry"

      - conditions:
          - condition: template
            value_template: >-
              {{ 
                temperature_interieure > temperature_max or 
                temperature_interieure < temperature_min
              }}
        sequence:
          - service: climate.set_hvac_mode
            data:
              entity_id: !input climatiseur
              hvac_mode: "{{ mode_actuel }}"
          - service: climate.set_temperature
            data:
              entity_id: !input climatiseur
              temperature: "{{ temperature_cible }}"

      - conditions:
          - condition: template
            value_template: >-
              {{ temperature_exterieure > (temperature_cible | float + 7) }}
        sequence:
          - service: climate.set_hvac_mode
            data:
              entity_id: !input climatiseur
              hvac_mode: "cool"
          - service: climate.set_temperature
            data:
              entity_id: !input climatiseur
              temperature: >
                {{ [temperature_exterieure | float - 7, (!input temperature_max_preservation | float)] | min }}

      - conditions:
          - condition: template
            value_template: >-
              {{
                (humidite_interieure >= (!input humidite_min | float) + 2.5) and
                (humidite_interieure <= (!input humidite_max | float) - 2.5) and
                (temperature_interieure >= temperature_min) and
                (temperature_interieure <= temperature_max)
              }}
        sequence:
          - service: climate.set_hvac_mode
            data:
              entity_id: !input climatiseur
              hvac_mode: "off"
