blueprint:
  name: Gestion optimisée des climatiseurs par saison et température
  description: >
    Automatise la gestion des climatiseurs en fonction des températures,
    de l'humidité, des plages horaires et des saisons. Évite les appels redondants
    et améliore l'efficacité en vérifiant l'état actuel des climatiseurs avant d'agir.
  domain: automation

  input:
    climatiseur:
      name: Climatiseur
      selector:
        entity:
          domain: climate

    temperature_interieur:
      name: Capteur de température intérieure
      selector:
        entity:
          domain: sensor
          device_class: temperature

    temperature_exterieur:
      name: Capteur de température extérieure
      selector:
        entity:
          domain: sensor
          device_class: temperature

    humidite_interieur:
      name: Capteur d'humidité intérieure
      selector:
        entity:
          domain: sensor
          device_class: humidity

    humidite_exterieur:
      name: Capteur d'humidité extérieure
      selector:
        entity:
          domain: sensor
          device_class: humidity

    saison:
      name: Saison actuelle
      selector:
        select:
          options:
            - printemps
            - ete
            - automne
            - hiver

    mode_climatisation:
      name: Mode de climatisation
      selector:
        select:
          options:
            - heat
            - cool
            - auto

    temperature_cible:
      name: Température cible
      selector:
        number:
          min: 18
          max: 26
          step: 0.5
          unit_of_measurement: °C

    humidite_min:
      name: Humidité minimale
      selector:
        number:
          min: 40
          max: 50
          step: 2.5
          unit_of_measurement: "%"

    humidite_max:
      name: Humidité maximale
      selector:
        number:
          min: 60
          max: 70
          step: 2.5
          unit_of_measurement: "%"

mode: single

trigger:
  - platform: state
    entity_id: !input temperature_interieur
    for: "00:10:00"  # Température intérieure stable pendant 10 minutes
  - platform: state
    entity_id: !input humidite_interieur
    for: "00:10:00"  # Humidité intérieure stable pendant 10 minutes

variables:
  mode_actuel: !input mode_climatisation
  temperature_cible: !input temperature_cible
  temperature_interieure: "{{ states(!input temperature_interieur) | float }}"
  temperature_exterieure: "{{ states(!input temperature_exterieur) | float }}"
  humidite_interieure: "{{ states(!input humidite_interieur) | float }}"
  humidite_exterieure: "{{ states(!input humidite_exterieur) | float }}"
  humidite_min: !input humidite_min
  humidite_max: !input humidite_max

action:
  - choose:
      # 1. Mode déshumidification (dry)
      - conditions:
          - condition: template
            value_template: >-
              {{ humidite_interieure < humidite_min or humidite_interieure > humidite_max }}
          - condition: template
            value_template: >-
              {{ state_attr(!input climatiseur, 'hvac_mode') != 'dry' }}
        sequence:
          - service: climate.set_hvac_mode
            data:
              entity_id: !input climatiseur
              hvac_mode: "dry"

      # 2. Ajuster le mode actif (heat, cool, auto)
      - conditions:
          - condition: template
            value_template: >-
              {{ temperature_interieure > (temperature_cible + 1) or temperature_interieure < (temperature_cible - 1) }}
          - condition: template
            value_template: >-
              {{ state_attr(!input climatiseur, 'hvac_mode') != mode_actuel }}
        sequence:
          - service: climate.set_hvac_mode
            data:
              entity_id: !input climatiseur
              hvac_mode: "{{ mode_actuel }}"
          - condition: template
            value_template: >-
              {{ state_attr(!input climatiseur, 'temperature') | float != temperature_cible }}
          - service: climate.set_temperature
            data:
              entity_id: !input climatiseur
              temperature: "{{ temperature_cible }}"

      # 3. Désactiver le climatiseur si tout est dans les plages
      - conditions:
          - condition: template
            value_template: >-
              {{
                (humidite_interieure >= humidite_min and humidite_interieure <= humidite_max) and
                (temperature_interieure >= (temperature_cible - 1) and temperature_interieure <= (temperature_cible + 1))
              }}
          - condition: template
            value_template: >-
              {{ state_attr(!input climatiseur, 'hvac_mode') != 'off' }}
        sequence:
          - service: climate.set_hvac_mode
            data:
              entity_id: !input climatiseur
              hvac_mode: "off"
