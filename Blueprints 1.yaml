blueprint:
  name: Gestion Climatisation Automatique
  description: Gère la climatisation avec des actions définies automatiquement selon la saison détectée.
  domain: automation
  input:
    plage_horaire:
      name: Plage Horaire
      description: Jour ou Nuit.
      selector:
        select:
          options:
            - jour
            - nuit
    thermometres_intérieur:
      name: Capteurs de température (Intérieur)
      description: Capteur utilisé pour mesurer la température intérieure.
      selector:
        entity:
          domain: sensor
    thermometres_exterieur:
      name: Capteurs de température (Extérieur)
      description: Capteur utilisé pour mesurer la température extérieure.
      selector:
        entity:
          domain: sensor
    climatiseurs:
      name: Climatiseur
      description: Entité du climatiseur à contrôler.
      selector:
        entity:
          domain: climate
    temperature_printemps:
      name: Température cible (Printemps)
      description: Température à maintenir pendant le printemps.
      selector:
        number:
          min: 18
          max: 26
          step: 0.5
    temperature_ete:
      name: Température cible (Été)
      description: Température à maintenir pendant l'été.
      selector:
        number:
          min: 18
          max: 26
          step: 0.5
    temperature_automne:
      name: Température cible (Automne)
      description: Température à maintenir pendant l'automne.
      selector:
        number:
          min: 18
          max: 26
          step: 0.5
    temperature_hiver:
      name: Température cible (Hiver)
      description: Température à maintenir pendant l'hiver.
      selector:
        number:
          min: 18
          max: 26
          step: 0.5
    heure_debut_plage_horaire:
      name: Début de plage horaire
      description: Heure à laquelle commence la plage horaire.
      selector:
        time:
    heure_fin_plage_horaire:
      name: Fin de plage horaire
      description: Heure à laquelle se termine la plage horaire.
      selector:
        time:
    seuil_tolerance:
      name: Seuil de tolérance
      description: Ajustement à appliquer autour de la température cible pour déclencher la climatisation.
      selector:
        number:
          min: 0
          max: 3
          step: 0.5
    temperature_max_preservation:
      name: Température maximum pour le mode préservation
      description: Température maximale cible lors du mode préservation.
      selector:
        number:
          min: 24
          max: 28
          step: 0.5

trigger:
  - platform: state
    entity_id: !input thermometres_intérieur

variables:
  current_date: "{{ now().date() }}"
  saison_auto: >
    {% if current_date >= now().replace(month=3, day=21).date() and current_date < now().replace(month=6, day=21).date() %}
      'printemps'
    {% elif current_date >= now().replace(month=6, day=21).date() and current_date < now().replace(month=9, day=21).date() %}
      'ete'
    {% elif current_date >= now().replace(month=9, day=21).date() and current_date < now().replace(month=12, day=21).date() %}
      'automne'
    {% else %}
      'hiver'
    {% endif %}
  temperature_cible: >
    {{ {
      'printemps': !input temperature_printemps,
      'ete': !input temperature_ete,
      'automne': !input temperature_automne,
      'hiver': !input temperature_hiver
    }[saison_auto] }}
  temperature_min: >
    {{ temperature_cible - !input seuil_tolerance }}
  temperature_max: >
    {{ temperature_cible + !input seuil_tolerance }}
  hvac_mode: >
    {{ 'cool' if saison_auto in ['printemps', 'ete'] else 'heat' }}

action:
  - choose:
      - conditions:
          - condition: or
            conditions:
              - condition: numeric_state
                entity_id: !input thermometres_intérieur
                below: temperature_min
              - condition: numeric_state
                entity_id: !input thermometres_intérieur
                above: temperature_max
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input climatiseurs
            data:
              hvac_mode: "{{ hvac_mode }}"
          - service: climate.set_temperature
            target:
              entity_id: !input climatiseurs
            data:
              temperature: temperature_cible
      - conditions:
          - condition: template
            value_template: >
              {{ (states(!input thermometres_exterieur) | float) - 7 > temperature_cible }}
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input climatiseurs
            data:
              hvac_mode: cool
          - service: climate.set_temperature
            target:
              entity_id: !input climatiseurs
            data:
              temperature: >
                {{ [(states(!input thermometres_exterieur) | float) - 7, !input temperature_max_preservation] | min }}
mode: single
