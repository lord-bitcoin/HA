blueprint:
  name: Contrôle Climatisation - Salon
  description: Gère la climatisation du salon avec des actions définies selon la saison et la plage horaire.
  domain: automation
  input:
    saison:
      name: Saison
      description: Définir manuellement la saison pour personnaliser les actions.
      selector:
        select:
          options:
            - printemps
            - ete
            - automne
            - hiver
    plage_horaire:
      name: Plage Horaire
      description: Jour ou Nuit.
      selector:
        select:
          options:
            - jour
            - nuit
    thermometres_intérieur:
      name: Capteurs de température (Intérieur)
      description: Capteur utilisé pour mesurer la température intérieure.
      selector:
        entity:
          domain: sensor
    thermometres_exterieur:
      name: Capteurs de température (Extérieur)
      description: Capteur utilisé pour mesurer la température extérieure.
      selector:
        entity:
          domain: sensor
    climatiseurs:
      name: Climatiseur
      description: Entité du climatiseur à contrôler.
      selector:
        entity:
          domain: climate
    temperature_printemps:
      name: Température cible (Printemps)
      description: Température à maintenir pendant le printemps.
      selector:
        number:
          min: 15
          max: 30
          step: 0.5
    temperature_ete:
      name: Température cible (Été)
      description: Température à maintenir pendant l'été.
      selector:
        number:
          min: 15
          max: 30
          step: 0.5
    temperature_automne:
      name: Température cible (Automne)
      description: Température à maintenir pendant l'automne.
      selector:
        number:
          min: 15
          max: 30
          step: 0.5
    temperature_hiver:
      name: Température cible (Hiver)
      description: Température à maintenir pendant l'hiver.
      selector:
        number:
          min: 15
          max: 30
          step: 0.5

trigger:
  - platform: state
    entity_id: !input thermometre_salon

condition:
  - condition: or
    conditions:
      - condition: and
        conditions:
          - condition: time
            after: "07:00:00"
            before: "00:00:00"
          - condition: template
            value_template: "{{ now().weekday() < 5 }}"  # Semaine
      - condition: and
        conditions:
          - condition: time
            after: "09:00:00"
            before: "00:00:00"
          - condition: template
            value_template: "{{ now().weekday() >= 5 }}"  # Week-end

variables:
  temperature_cible: >
    {{ {
      'printemps': !input temperature_printemps,
      'ete': !input temperature_ete,
      'automne': !input temperature_automne,
      'hiver': !input temperature_hiver
    }[!input saison] }}

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ !input saison == 'printemps' }}"
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input clim_salon
            data:
              hvac_mode: cool
          - service: climate.set_temperature
            target:
              entity_id: !input clim_salon
            data:
              temperature: !input temperature_printemps
      - conditions:
          - condition: template
            value_template: "{{ !input saison == 'ete' }}"
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input clim_salon
            data:
              hvac_mode: cool
          - service: climate.set_temperature
            target:
              entity_id: !input clim_salon
            data:
              temperature: !input temperature_ete
      - conditions:
          - condition: template
            value_template: "{{ !input saison == 'automne' }}"
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input clim_salon
            data:
              hvac_mode: heat
          - service: climate.set_temperature
            target:
              entity_id: !input clim_salon
            data:
              temperature: !input temperature_automne
      - conditions:
          - condition: template
            value_template: "{{ !input saison == 'hiver' }}"
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input clim_salon
            data:
              hvac_mode: heat
          - service: climate.set_temperature
            target:
              entity_id: !input clim_salon
            data:
              temperature: !input temperature_hiver
mode: single
