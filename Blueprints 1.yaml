blueprint:
  name: Gestion Climatisation Automatique
  description: Gère la climatisation avec des actions définies automatiquement selon la saison détectée.
  domain: automation
  input:  
    plage_horaire:
      name: Plage Horaire
      description: Jour ou Nuit.
      selector:
        select:
          options:
            - jour
            - nuit
    plage_semaine:
      name: Plage Semaine
      description: Permet de sélectionner si l'automatisation s'applique à la semaine ou au week-end.
      selector:
        select:
          options:
            - semaine
            - week-end
    thermometres_interieur:
      name: Capteur de température (Intérieur)
      description: Capteur utilisé pour mesurer la température intérieure.
      selector:
        entity:
          domain: sensor
    thermometres_exterieur:
      name: Capteur de température (Extérieur)
      description: Capteur utilisé pour mesurer la température extérieure.
      selector:
        entity:
          domain: sensor
    climatiseurs:
      name: Climatiseur
      description: Entité du climatiseur à contrôler.
      selector:
        entity:
          domain: climate
    temperature_printemps:
      name: Température cible (Printemps)
      description: Température à maintenir pendant le printemps.
      selector:
        number:
          min: 18
          max: 26
          step: 0.5
      defaut: 19
    mode_printemps:
      name: Mode Printemps
      description: Mode à utiliser pendant le printemps.
      selector:
        select:
          options:
            - auto
            - cool
            - heat
            - dry
            - fan_only
    temperature_ete:
      name: Température cible (Été)
      description: Température à maintenir pendant l'été.
      selector:
        number:
          min: 18
          max: 26
          step: 0.5
      default: 21
    mode_ete:
      name: Mode Été
      description: Mode à utiliser pendant l'été.
      selector:
        select:
          options:
            - auto
            - cool
            - heat
            - dry
            - fan_only
    temperature_automne:
      name: Température cible (Automne)
      description: Température à maintenir pendant l'automne.
      selector:
        number:
          min: 18
          max: 26
          step: 0.5
      default: 20
    mode_automne:
      name: Mode Automne
      description: Mode à utiliser pendant l'automne.
      selector:
        select:
          options:
            - auto
            - cool
            - heat
            - dry
            - fan_only
    temperature_hiver:
      name: Température cible (Hiver)
      description: Température à maintenir pendant l'hiver.
      selector:
        number:
          min: 18
          max: 26
          step: 0.5
      default: 20
    mode_hiver:
      name: Mode Hiver
      description: Mode à utiliser pendant l'hiver.
      selector:
        select:
          options:
            - auto
            - cool
            - heat
            - dry
            - fan_only
    temperature_max_preservation:
      name: Température maximale de préservation
      description: La température maximale autorisée dans le mode préservation.
      selector:
        number:
          min: 24  
          max: 30  
          step: 0.5
      default: 24
    seuil_tolerance:
      name: Seuil de tolérance
      description: Ajustement à appliquer autour de la température cible pour déclencher la climatisation.
      selector:
        number:
          min: 0
          max: 3
          step: 0.5
      default: 0.5

trigger:
  # Déclenchement lorsque l'état du capteur de température intérieur change.
  - platform: state
    entity_id: !input thermometres_interieur

variables:
  variables:

  temperature_max_preservation: "{{ !input.temperature_max_preservation }}"
  
  is_preservation_mode: >
    {{ (states(!input.thermometres_exterieur) | float) - 7 > temperature_cible }}

  is_weekend: >
    {{ now().weekday() >= 5 }}

  jour_semaine_selection: >
    {{ 'week-end' if is_weekend else 'semaine' }}

  current_date: "{{ now().date() }}"

  saison_auto: >
    {% if current_date >= now().replace(month=3, day=21).date() and current_date < now().replace(month=6, day=21).date() %}
      'printemps'
    {% elif current_date >= now().replace(month=6, day=21).date() and current_date < now().replace(month=9, day=21).date() %}
      'ete'
    {% elif current_date >= now().replace(month=9, day=21).date() and current_date < now().replace(month=12, day=21).date() %}
      'automne'
    {% else %}
      'hiver'
    {% endif %}

  temperature_cible: >
    {{ {
      'printemps': !input.temperature_printemps,
      'ete': !input.temperature_ete,
      'automne': !input.temperature_automne,
      'hiver': !input.temperature_hiver
    }[saison_auto] }}

  temperature_min: >
    {{ temperature_cible - !input.seuil_tolerance }}

  temperature_max: >
    {{ temperature_cible + !input.seuil_tolerance }}

  hvac_mode: >
    {{ {
      'printemps': !input.mode_printemps,
      'ete': !input.mode_ete,
      'automne': !input.mode_automne,
      'hiver': !input.mode_hiver
    }[saison_auto] }}

action:
  - choose:
      # Condition : Si la température intérieure est hors des seuils
      - conditions:
          - condition: or
            conditions:
              - condition: numeric_state
                entity_id: !input.thermometres_interieur
                below: "{{ temperature_min }}"
              - condition: numeric_state
                entity_id: !input.thermometres_interieur
                above: "{{ temperature_max }}"
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input.climatiseurs
            data:
              hvac_mode: "{{ hvac_mode }}"
          - service: climate.set_temperature
            target:
              entity_id: !input.climatiseurs
            data:
              temperature: "{{ temperature_cible }}"

      - conditions:
          - condition: template
            value_template: >
              {{ is_preservation_mode }}
        sequence:
          - service: climate.set_temperature
            target:
              entity_id: !input.climatiseurs
            data:
              temperature: >
                {{ [(states(!input.thermometres_exterieur) | float) - 7, temperature_max_preservation] | min }}
mode: single
