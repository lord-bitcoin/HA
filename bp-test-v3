blueprint:
  name: Gestion automatisée des climatiseurs
  description: Automatise les climatiseurs selon la saison, les capteurs et les plages horaires.
  domain: automation
  input:
    climate_entity:
      name: Climatiseur
      description: Entité du climatiseur à automatiser.
      selector:
        entity:
          domain: climate

    indoor_temp:
      name: Température intérieure
      description: Capteur de température intérieure.
      selector:
        entity:
          domain: sensor
          device_class: temperature

    outdoor_temp:
      name: Température extérieure
      description: Capteur de température extérieure.
      selector:
        entity:
          domain: sensor
          device_class: temperature

    indoor_humidity:
      name: Humidité intérieure
      description: Capteur d'humidité intérieure.
      selector:
        entity:
          domain: sensor
          device_class: humidity

    outdoor_humidity:
      name: Humidité extérieure
      description: Capteur d'humidité extérieure.
      selector:
        entity:
          domain: sensor
          device_class: humidity

    target_temp:
      name: Température cible
      description: Température cible pour le climatiseur.
      selector:
        number:
          min: 18
          max: 26
          step: 0.1

    temp_tolerance:
      name: Tolérance de température
      description: Tolérance pour éviter les cycles courts (en °C).
      selector:
        number:
          min: 0
          max: 2
          step: 0.1

    default_mode:
      name: Mode par défaut
      description: Mode HVAC par défaut si aucune condition n'est remplie.
      selector:
        select:
          options:
            - heat
            - cool
            - auto

    default_swing_mode:
      name: Mode oscillation par défaut
      description: Mode de swing par défaut du climatiseur.
      selector:
        select:
          options:
            - label: "off" 
              value: "0"
            - label: "vertical"
              value: "1"
            - label: "horizontal"
              value: "2"
            - label: "V&H"
              value: "3"

    default_fan_speed:
      name: Vitesse du ventilateur par défaut
      description: Vitesse du ventilateur par défaut.
      selector:
        select:
          options:
            - low
            - medium low
            - medium
            - medium high
            - high
            - auto

    manual_season:
      name: Saison manuelle (optionnelle)
      description: Sélectionner une saison manuellement si souhaité.
      selector:
        select:
          options:
            - hiver
            - printemps
            - été
            - automne

    min_humidity:
      name: Humidité minimale
      description: Seuil minimal d'humidité pour activer le climatiseur.
      selector:
        number:
          min: 40
          max: 50
          step: 0.5

    max_humidity:
      name: Humidité maximale
      description: Seuil maximal d'humidité pour activer le climatiseur.
      selector:
        number:
          min: 50
          max: 60
          step: 0.5

    target_humidity:
      name: Humidité cible
      description: Niveau d'humidité cible à atteindre.
      selector:
        number:
          min: 30
          max: 70
          step: 1

    start_time:
      name: Heure de début
      description: Heure de début pour activer l'automatisation.
      selector:
        time:

    end_time:
      name: Heure de fin
      description: Heure de fin pour activer l'automatisation.
      selector:
        time:

    mode_jours:
      name: Mode jours
      description: Activer pour semaine, week-end, ou tous les jours.
      selector:
        select:
          options:
            - semaine
            - weekend

mode: single

trigger:
  # Déclencheur 1 : Lorsque les capteurs de température ou d'humidité changent d'état.
  - platform: state
    entity_id:
      - !input indoor_temp
      - !input outdoor_temp
      - !input indoor_humidity
      - !input outdoor_humidity

  # Déclencheur 2 : Vérification toutes les 5 minutes pour s'assurer que les conditions sont respectées.
  - platform: time_pattern
    minutes: "/15"

condition:
  # Condition 1 : S'assurer que le climatiseur est disponible et allumé.
  - condition: state
    entity_id: !input climate_entity
    state: "on"

  # Condition 2 : S'assurer que l'heure actuelle est comprise dans la plage horaire configurée par l'utilisateur.
  - condition: template
    value_template: >
      {% set now_time = states('sensor.time') %}
      {% set start_time = states('input_datetime.start_time') %}
      {% set end_time = states('input_datetime.end_time') %}
      {{ start_time <= now_time <= end_time }}

  # Condition 3 : Activer selon le jour de la semaine basé sur le mode choisi.
  - condition: template
    value_template: >
      {% set today = now().weekday() %}  # Lundi = 0, Dimanche = 6
      {% if inputs.mode_jours == 'semaine' %}
        {{ today in [0, 1, 2, 3, 4] }}
      {% elif inputs.mode_jours == 'weekend' %}
        {{ today in [5, 6] }}
      {% endif %}

action:
  - variables:
      saison_actuelle: >-
        {% if inputs.manual_season != "" %}
          {{ inputs.manual_season }}
        {% else %}
          {% set today = now().date() %}
          {% if today >= today.replace(month=3, day=20) and today <= today.replace(month=6, day=20) %}
            printemps
          {% elif today >= today.replace(month=6, day=21) and today <= today.replace(month=9, day=22) %}
            été
          {% elif today >= today.replace(month=9, day=23) and today <= today.replace(month=12, day=20) %}
            automne
          {% else %}
            hiver
          {% endif %}
        {% endif %}

  - choose:
      # Action 1 : Automatisation pour l'hiver
      - conditions:
          - condition: template
            value_template: >
              {{ saison_actuelle == 'hiver' }}
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {{ states(inputs.outdoor_temp)|float < (states(inputs.target_temp)|float - states(inputs.temp_tolerance)|float) }}
                sequence:
                  - service: climate.set_hvac_mode
                    target:
                      entity_id: !input climate_entity
                    data:
                      hvac_mode: "heat"
                      swing_mode : "3"

      # Action 2 : Automatisation pour le printemps
      - conditions:
          - condition: template
            value_template: >
              {{ saison_actuelle == 'printemps' }}
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {{ states(inputs.indoor_temp)|float > (states(inputs.target_temp)|float + states(inputs.temp_tolerance)|float) }}
                sequence:
                  - service: climate.set_hvac_mode
                    target:
                      entity_id: !input climate_entity
                    data:
                      hvac_mode: "cool"
                      swing_mode : "3"

      # Action 3 : Automatisation pour l'été
      - conditions:
          - condition: template
            value_template: >
              {{ saison_actuelle == 'été' }}
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {{ states(inputs.outdoor_temp)|float > (states(inputs.target_temp)|float + states(inputs.temp_tolerance)|float) }}
                sequence:
                  - service: climate.set_hvac_mode
                    target:
                      entity_id: !input climate_entity
                    data:
                      hvac_mode: "cool"
                      swing_mode : "3"

      # Action 4 : Automatisation pour l'automne
      - conditions:
          - condition: template
            value_template: >
              {{ saison_actuelle == 'automne' }}
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: >
                      {{ states(inputs.outdoor_temp)|float < (states(inputs.target_temp)|float - states(inputs.temp_tolerance)|float) }}
                sequence:
                  - service: climate.set_hvac_mode
                    target:
                      entity_id: !input climate_entity
                    data:
                      hvac_mode: "heat"
                      swing_mode : "3"

  # Action pour ajuster l'humidité cible
  - choose:
      - conditions:
          - condition: template
            value_template: >
              {{ states(inputs.indoor_humidity)|float != inputs.target_humidity }}
        sequence:
          - service: climate.set_humidity
            target:
              entity_id: !input climate_entity
            data:
              humidity: inputs.target_humidity

  # Mettre à jour la température cible du climatiseur.
  - service: climate.set_temperature
    target:
      entity_id: !input climate_entity
    data:
      temperature: !input target_temp

  # Notification : Envoyer une alerte lorsque le mode du climatiseur change.
  - service: notify.notify
    data:
      title: "Changement de mode de climatiseur"
      message: >
        Le climatiseur est passé en mode {{ state_attr('!input climate_entity', 'hvac_action') }} avec une température cible de {{ !input target_temp }} °C et une humidité cible de {{ !input target_humidity }}%.
