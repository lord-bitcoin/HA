blueprint:
  name: Gestion automatisée des climatiseurs
  description: Automatise les climatiseurs selon la saison, les capteurs et les plages horaires.
  domain: automation

  input:
    climate_entity:
      name: Climatiseur
      description: Entité du climatiseur à automatiser.
      selector:
        entity:
          domain: climate

    indoor_temp:
      name: Température intérieure
      description: Capteur de température intérieure.
      selector:
        entity:
          domain: sensor
          device_class: temperature

    outdoor_temp:
      name: Température extérieure
      description: Capteur de température extérieure.
      selector:
        entity:
          domain: sensor
          device_class: temperature

    indoor_humidity:
      name: Humidité intérieure
      description: Capteur d'humidité intérieure.
      selector:
        entity:
          domain: sensor
          device_class: humidity

    outdoor_humidity:
      name: Humidité extérieure
      description: Capteur d'humidité extérieure.
      selector:
        entity:
          domain: sensor
          device_class: humidity

    target_temp:
      name: Température cible
      description: Température cible pour le climatiseur.
      selector:
        number:
          min: 18
          max: 26
          step: 0.1

    temp_tolerance:
      name: Tolérance de température
      description: Tolérance pour éviter les cycles courts (en °C).
      selector:
        number:
          min: 0
          max: 2
          step: 0.1

    default_mode:
      name: Mode par défaut
      description: Mode HVAC par défaut si aucune condition n'est remplie.
      selector:
        select:
          options:
            - heat
            - cool
            - auto

    default_fan_speed:
      name: Vitesse du ventilateur par défaut
      description: Vitesse du ventilateur par défaut.
      selector:
        select:
          options:
            - low
            - medium low
            - medium
            - medium high
            - high
            - auto

    manual_season:
      name: Saison manuelle (optionnelle)
      description: Sélectionner une saison manuellement si souhaité.
      selector:
        select:
          options:
            - hiver
            - printemps
            - été
            - automne
          mode: dropdown
          multiple: false

    min_humidity:
      name: Humidité minimale
      description: Seuil minimal d'humidité pour activer le climatiseur.
      selector:
        number:
          min: 40
          max: 50
          step: 0.5

    max_humidity:
      name: Humidité maximale
      description: Seuil maximal d'humidité pour activer le climatiseur.
      selector:
        number:
          min: 50
          max: 60
          step: 0.5

    target_humidity:
      name: Humidité cible
      description: Niveau d'humidité cible à atteindre.
      selector:
        number:
          min: 30
          max: 70
          step: 1

    start_time:
      name: Heure de début
      description: Heure de début pour activer l'automatisation.
      selector:
        time: {}

    end_time:
      name: Heure de fin
      description: Heure de fin pour activer l'automatisation.
      selector:
        time: {}

    mode_jours:
      name: Mode jours
      description: Activer pour semaine, week-end, ou tous les jours.
      selector:
        select:
          options:
            - semaine
            - weekend
            - tous
          mode: dropdown
          multiple: false

  trigger_variables:
    saison: >
      {% if trigger.to_state.state != "" %}
        {{ trigger.to_state.state }}
      {% else %}
        {% set today = now().date() %}
        {% if today >= today.replace(month=3, day=20) and today <= today.replace(month=6, day=20) %}
          printemps
        {% elif today >= today.replace(month=6, day=21) and today <= today.replace(month=9, day=22) %}
          été
        {% elif today >= today.replace(month=9, day=23) and today <= today.replace(month=12, day=20) %}
          automne
        {% else %}
          hiver
        {% endif %}
      {% endif %}

  trigger:
    - platform: state
      entity_id: !input indoor_temp

    - platform: state
      entity_id: !input outdoor_temp

    - platform: state
      entity_id: !input indoor_humidity

    - platform: state
      entity_id: !input outdoor_humidity

    - platform: time_pattern
      minutes: "/15"

  condition:
    - condition: state
      entity_id: !input climate_entity
      state: "on"

    - condition: template
      value_template: >
        {% set now = now().strftime("%H:%M") %}
        {% set start = start_time %}
        {% set end = end_time %}
        {{ start <= now <= end }}

    - condition: template
      value_template: >
        {% set today = now().weekday() %}
        {% if mode_jours == 'semaine' %}
          {{ today in [0, 1, 2, 3, 4] }}
        {% elif mode_jours == 'weekend' %}
          {{ today in [5, 6] }}
        {% else %}
          true
        {% endif %}

  action:
    - choose:
        - conditions:
            - condition: template
              value_template: "{{ saison == 'hiver' }}"
          sequence:
            - choose:
                - conditions:
                    - condition: template
                      value_template: >
                        {{ states(trigger.entity_id)|float < (target_temp|float - temp_tolerance|float) }}
                  sequence:
                    - service: climate.set_hvac_mode
                      target:
                        entity_id: !input climate_entity
                      data:
                        hvac_mode: heat

        - conditions:
            - condition: template
              value_template: "{{ saison == 'printemps' }}"
          sequence:
            - choose:
                - conditions:
                    - condition: template
                      value_template: >
                        {{ states(trigger.entity_id)|float > (target_temp|float + temp_tolerance|float) }}
                  sequence:
                    - service: climate.set_hvac_mode
                      target:
                        entity_id: !input climate_entity
                      data:
                        hvac_mode: cool

        - conditions:
            - condition: template
              value_template: "{{ saison == 'été' }}"
          sequence:
            - choose:
                - conditions:
                    - condition: template
                      value_template: >
                        {{ states(trigger.entity_id)|float > (target_temp|float + temp_tolerance|float) }}
                  sequence:
                    - service: climate.set_hvac_mode
                      target:
                        entity_id: !input climate_entity
                      data:
                        hvac_mode: cool

        - conditions:
            - condition: template
              value_template: "{{ saison == 'automne' }}"
          sequence:
            - choose:
                - conditions:
                    - condition: template
                      value_template: >
                        {{ states(trigger.entity_id)|float < (target_temp|float - temp_tolerance|float) }}
                  sequence:
                    - service: climate.set_hvac_mode
                      target:
                        entity_id: !input climate_entity
                      data:
                        hvac_mode: heat

      default:
        - service: climate.set_hvac_mode
          target:
            entity_id: !input climate_entity
          data:
            hvac_mode: !input default_mode

        - service: climate.set_fan_mode
          target:
            entity_id: !input climate_entity
          data:
            fan_mode: !input default_fan_speed

        - service: climate.set_temperature
          target:
            entity_id: !input climate_entity
          data:
            temperature: !input target_temp

        - service: climate.set_humidity
          target:
            entity_id: !input climate_entity
          data:
            humidity: !input target_humidity

    - service: notify.notify
      data:
        title: "Changement de mode de climatiseur"
        message: >-
          Le climatiseur est passé en mode {{ state_attr(climate_entity, 'hvac_action') }}
          avec une température cible de {{ target_temp }} °C
          et une humidité cible de {{ target_humidity }}%
