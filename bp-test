blueprint:
  name: Gestion automatisée des climatiseurs par saison et température (Optimisé)
  description: >
    Automatise la gestion des climatiseurs selon la saison, les plages horaires, 
    et les températures mesurées à l'intérieur et à l'extérieur.
    Active un mode "dry" si l'humidité mesurée sort des seuils définis, avec une marge dynamique 
    ajustable pour éviter un fonctionnement trop fréquent.
    Vérifie l'état du climatiseur avant d'exécuter toute action pour éviter les appels redondants.
  domain: automation

  input:
    climatiseur:
      name: Climatiseur
      selector:
        entity:
          domain: climate

    temperature_interieur:
      name: Capteur de température intérieure
      selector:
        entity:
          domain: sensor
          device_class: temperature

    temperature_exterieur:
      name: Capteur de température extérieure
      selector:
        entity:
          domain: sensor
          device_class: temperature

    humidite_interieur:
      name: Capteur d'humidité intérieure
      selector:
        entity:
          domain: sensor
          device_class: humidity

    humidite_exterieur:
      name: Capteur d'humidité extérieure
      selector:
        entity:
          domain: sensor
          device_class: humidity

    saison:
      name: Saison actuelle
      selector:
        select:
          options:
            - printemps
            - ete
            - automne
            - hiver

    mode_climatisation:
      name: Mode de climatisation
      selector:
        select:
          options:
            - heat
            - cool
            - auto

    temperature_cible:
      name: Température cible
      selector:
        number:
          min: 18
          max: 26
          step: 0.5
          unit_of_measurement: °C

    heure_debut_jour:
      name: Heure de début de la journée
      selector:
        time:

    heure_fin_jour:
      name: Heure de fin de la journée
      selector:
        time:

    seuil_tolerance:
      name: Seuil de tolérance
      selector:
        number:
          min: 0
          max: 3
          step: 0.5
          unit_of_measurement: °C

    temperature_max_preservation:
      name: Température max tolérée
      selector:
        number:
          min: 20
          max: 30
          step: 0.5
          unit_of_measurement: °C

    humidite_min:
      name: Humidité minimale
      selector:
        number:
          min: 40
          max: 50
          step: 2.5
          unit_of_measurement: "%"

    humidite_max:
      name: Humidité maximale
      selector:
        number:
          min: 60
          max: 70
          step: 2.5
          unit_of_measurement: "%"

    mode_semaine_weekend:
      name: Mode semaine ou week-end
      selector:
        select:
          options:
            - semaine
            - weekend

mode: single

trigger:
  - platform: state
    entity_id: !input temperature_interieur
  - platform: state
    entity_id: !input humidite_interieur
  - platform: state
    entity_id: !input humidite_exterieur
  - platform: time_pattern
    minutes: "/30"

variables:
  saison: !input saison
  mode_actuel: !input mode_climatisation
  temperature_cible: !input temperature_cible
  temperature_interieure: "{{ states(!input temperature_interieur) | float }}"
  temperature_exterieure: "{{ states(!input temperature_exterieur) | float }}"
  humidite_interieure: "{{ states(!input humidite_interieur) | float }}"
  humidite_exterieure: "{{ states(!input humidite_exterieur) | float }}"
  temperature_min: "{{ temperature_cible | float - (!input seuil_tolerance | float) }}"
  temperature_max: "{{ temperature_cible | float + (!input seuil_tolerance | float) }}"

  # Ajustement des tolérances d'humidité en fonction de l'humidité extérieure
  facteur_tolerance: "{{ 0.5 if saison in ['hiver', 'automne'] else 0 }}"
  humidite_min_marge: >-
    {{
      (!input humidite_min | float + 2.5 + facteur_tolerance) - 
      (5 if humidite_exterieure <= (!input humidite_min | float - 30) else 0)
    }}
  humidite_max_marge: >-
    {{
      (!input humidite_max | float - 2.5 - facteur_tolerance) + 
      (5 if humidite_exterieure >= (!input humidite_max | float + 30) else 0)
    }}

condition:
  - condition: template
    value_template: >-
      {% if mode_semaine_weekend == 'semaine' %}
        {{ now().weekday() in [0, 1, 2, 3, 4] }}
      {% else %}
        {{ now().weekday() in [5, 6] }}
      {% endif %}

action:
  - choose:
      # 1. Mode déshumidification (dry)
      - conditions:
          - condition: template
            value_template: >-
              {{ humidite_interieure < humidite_min_marge or humidite_interieure > humidite_max_marge }}
          - condition: template
            value_template: >-
              {{ state_attr(!input climatiseur, 'hvac_mode') != 'dry' }}
        sequence:
          - service: climate.set_hvac_mode
            data:
              entity_id: !input climatiseur
              hvac_mode: "dry"

      # 2. Mode général (heat, cool, auto)
      - conditions:
          - condition: template
            value_template: >-
              {{ temperature_interieure > temperature_max or temperature_interieure < temperature_min }}
          - condition: template
            value_template: >-
              {{ state_attr(!input climatiseur, 'hvac_mode') != mode_actuel }}
        sequence:
          - service: climate.set_hvac_mode
            data:
              entity_id: !input climatiseur
              hvac_mode: "{{ mode_actuel }}"
          - condition: template
            value_template: >-
              {{ state_attr(!input climatiseur, 'temperature') | float != temperature_cible }}
          - service: climate.set_temperature
            data:
              entity_id: !input climatiseur
              temperature: "{{ temperature_cible }}"

      # 3. Mode refroidissement (cool) basé sur la température extérieure
      - conditions:
          - condition: template
            value_template: >-
              {{ temperature_exterieure > (temperature_cible | float + 7) }}
          - condition: template
            value_template: >-
              {{ state_attr(!input climatiseur, 'hvac_mode') != 'cool' }}
        sequence:
          - service: climate.set_hvac_mode
            data:
              entity_id: !input climatiseur
              hvac_mode: "cool"
          - service: climate.set_temperature
            data:
              entity_id: !input climatiseur
              temperature: >-
                {{ [temperature_exterieure | float - 7, (!input temperature_max_preservation | float)] | min }}

      # 4. Désactivation du climatiseur (off)
      - conditions:
          - condition: template
            value_template: >-
              {{
                (humidite_interieure >= humidite_min and humidite_interieure <= humidite_max) and
                (temperature_interieure >= temperature_min and temperature_interieure <= temperature_max)
              }}
          - condition: template
            value_template: >-
              {{ state_attr(!input climatiseur, 'hvac_mode') != 'off' }}
        sequence:
          - service: climate.set_hvac_mode
            data:
              entity_id: !input climatiseur
              hvac_mode: "off"
