blueprint:
  name: Gestion automatisée des climatiseurs par saison et température
  description: >
    Automatise la gestion des climatiseurs selon la saison, les plages horaires, 
    et les températures mesurées à l'intérieur et à l'extérieur.
    Active un mode "dry" si l'humidité mesurée sort des seuils définis, avec une marge dynamique 
    ajustable pour éviter un fonctionnement trop fréquent.
    Ajuste les tolérances d'humidité en fonction de l'humidité extérieure.
    Configure des comportements spécifiques pour la semaine ou le week-end.
  domain: automation
  input:
    climatiseur:
      name: Climatiseur
      selector:
        entity:
          domain: climate
    temperature_interieur:
      name: Capteur de température intérieure
      selector:
        entity:
          domain: sensor
          device_class: temperature
    temperature_exterieur:
      name: Capteur de température extérieure
      selector:
        entity:
          domain: sensor
          device_class: temperature
    humidite_interieur:
      name: Capteur d'humidité intérieure
      selector:
        entity:
          domain: sensor
          device_class: humidity
    humidite_exterieur:
      name: Capteur d'humidité extérieure
      selector:
        entity:
          domain: sensor
          device_class: humidity
    saisons_actives:
      name: Saisons actives
      description: Choisissez les saisons pendant lesquelles cette automatisation sera active.
      selector:
        select:
          multiple: true
          options:
            - printemps
            - ete
            - automne
            - hiver
    mode_climatisation:
      name: Mode de climatisation
      selector:
        select:
          options:
            - heat
            - cool
            - auto
    temperature_cible:
      name: Température cible
      selector:
        number:
          min: 18
          max: 26
          step: 0.5
          unit_of_measurement: °C
    heure_debut_jour:
      name: Heure de début de la journée
      selector:
        time:
    heure_fin_jour:
      name: Heure de fin de la journée
      selector:
        time:
    seuil_tolerance:
      name: Seuil de tolérance
      selector:
        number:
          min: 0
          max: 2
          step: 0.1
          unit_of_measurement: °C
    temperature_max_preservation:
      name: Température max tolérée
      selector:
        number:
          min: 24
          max: 30
          step: 0.5
          unit_of_measurement: °C
    humidite_min:
      name: Humidité minimale
      selector:
        number:
          min: 40
          max: 50
          step: 2.5
          unit_of_measurement: "%"
    humidite_max:
      name: Humidité maximale
      selector:
        number:
          min: 50
          max: 60
          step: 2.5
          unit_of_measurement: "%"
    mode_semaine_weekend:
      name: Mode semaine ou week-end
      selector:
        select:
          options:
            - semaine
            - weekend
mode: single
triggers:
  - platform: state
    entity_id: !input temperature_interieur
  - platform: state
    entity_id: !input humidite_interieur
  - platform: state
    entity_id: !input humidite_exterieur
  - platform: time_pattern
    minutes: "/15"
variables:
  mode_vacances_actif: "{{ is_state('input.mode_vacances', 'on') }}"
  mode_actuel: "{{ input.mode_climatisation }}"
  temperature_cible: "{{ input.temperature_cible }}"
  temperature_interieure: "{{ states(input.temperature_interieur) | float }}"
  temperature_exterieure: "{{ states(input.temperature_exterieur) | float }}"
  humidite_interieure: "{{ states(input.humidite_interieur) | float }}"
  humidite_exterieure: "{{ states(input.humidite_exterieur) | float }}"
  temperature_min: "{{ temperature_cible | float - (input.seuil_tolerance | float) }}"
  temperature_max: "{{ temperature_cible | float + (input.seuil_tolerance | float) }}"
  temperature_cible_preservation: >-
    {{
      [temperature_exterieure | float - 7, (input.temperature_max_preservation | float)] | min
    }}
  humidite_extreme_basse: "{{ input.humidite_min | float - 20 }}"
  humidite_extreme_haute: "{{ input.humidite_max | float + 20 }}"
  humidite_min_marge: "{{ input.humidite_min | float + 2.5 }}"
  humidite_max_marge: "{{ input.humidite_max | float - 2.5 }}"
  ajustement_humidite: >-
    {{
      -5 if humidite_exterieure <= (input.humidite_min | float - 20) else 
      5 if humidite_exterieure >= (input.humidite_max | float + 20) else 
      0
    }}
  humidite_min_finale: "{{ humidite_min_marge + ajustement_humidite }}"
  humidite_max_finale: "{{ humidite_max_marge + ajustement_humidite }}"
conditions:
  - condition: template
    value_template: "{{ states(input.temperature_interieur) not in ['unknown', 'unavailable'] }}"
  - condition: template
    value_template: "{{ states(input.temperature_exterieur) not in ['unknown', 'unavailable'] }}"
  - condition: template
    value_template: "{{ states(input.humidite_interieur) not in ['unknown', 'unavailable'] }}"
  - condition: template
    value_template: "{{ states(input.humidite_exterieur) not in ['unknown', 'unavailable'] }}"
  - condition: template
    value_template: "{{ states(input.climatiseur) not in ['unknown', 'unavailable'] }}"
  - condition: template
    value_template: "{{ saison_actuelle in input.saisons_actives }}"
actions:
  - service: script.verifier_saison_active
    data:
      saisons_actives: "{{ input.saisons_actives }}"
  - condition: state
    entity_id: input_boolean.verifier_saison_active
    state: "on"
  - service: script.verifier_semaine_weekend
    data:
      mode_semaine_weekend: "{{ input.mode_semaine_weekend }}"
  - condition: state
    entity_id: input_boolean.mode_jour_valide
    state: "on"
  - service: script.check_conditions_clim
    data:
      temperature_min: "{{ temperature_min }}"
      temperature_max: "{{ temperature_max }}"
      humidite_min: "{{ humidite_min_finale }}"
      humidite_max: "{{ humidite_max_finale }}"
      temperature_interieure: "{{ input.temperature_interieur }}"
      humidite_interieure: "{{ input.humidite_interieur }}"
  - condition: state
    entity_id: input_boolean.conditions_clim_ok
    state: "on"
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ temperature_interieure > temperature_max or temperature_interieure < temperature_min }}"
        sequence:
          - service: script.gestion_notifications_critique
            data:
              type: "temperature"
              niveau: >-
                {% if temperature_interieure > temperature_max %}
                  max
                {% else %}
                  min
                {% endif %}
              valeur: "{{ temperature_interieure }}"
              seuil: >-
                {% if temperature_interieure > temperature_max %}
                  {{ temperature_max }}
                {% else %}
                  {{ temperature_min }}
                {% endif %}
      - conditions:
          - condition: template
            value_template: "{{ humidite_interieure > humidite_max_finale }}"
        sequence:
          - service: script.gestion_notifications_critique
            data:
              type: "humidite"
              niveau: "max"
              valeur: "{{ humidite_interieure }}"
              seuil: "{{ humidite_max_finale }}"
      - conditions:
          - condition: template
            value_template: "{{ humidite_interieure < humidite_min_finale }}"
        sequence:
          - service: script.gestion_notifications_critique
            data:
              type: "humidite"
              niveau: "min"
              valeur: "{{ humidite_interieure }}"
              seuil: "{{ humidite_min_finale }}"
      - conditions:
          - condition: template
            value_template: "{{ temperature_interieure > temperature_max or temperature_interieure < temperature_min }}"
          - condition: template
            value_template: "{{ state_attr(input.climatiseur, 'hvac_mode') != mode_actuel }}"
        sequence:
          - service: climate.set_hvac_mode
            data:
              entity_id: !input climatiseur
              hvac_mode: "{{ mode_actuel }}"
          - service: climate.set_temperature
            data:
              entity_id: !input climatiseur
              temperature: "{{ temperature_cible }}"
      - conditions:
          - condition: template
            value_template: "{{ temperature_exterieure > (temperature_cible | float + 7) }}"
          - condition: template
            value_template: "{{ state_attr(input.climatiseur, 'hvac_mode') != 'cool' }}"
        sequence:
          - service: climate.set_hvac_mode
            data:
              entity_id: !input climatiseur
              hvac_mode: "cool"
          - service: climate.set_temperature
            data:
              entity_id: !input climatiseur
              temperature: >-
                {{ [temperature_exterieure | float - 7, (input.temperature_max_preservation | float)] | min }}
      - conditions:
          - condition: template
            value_template: >-
              {{
                (humidite_interieure >= humidite_min and humidite_interieure <= humidite_max) and
                (temperature_interieure >= temperature_min and temperature_interieure <= temperature_max)
              }}
          - condition: template
            value_template: "{{ state_attr(input.climatiseur, 'hvac_mode') != 'off' }}"
        sequence:
          - service: climate.set_hvac_mode
            data:
              entity_id: !input climatiseur
              hvac_mode: "off"
      - conditions:
          - condition: template
            value_template: "{{ temperature_exterieure > (temperature_interieure + 7) }}"
          - condition: template
            value_template: "{{ state_attr(input.climatiseur, 'hvac_mode') != 'cool' }}"
        sequence:
          - service: climate.set_hvac_mode
            data:
              entity_id: !input climatiseur
              hvac_mode: "cool"
          - service: climate.set_temperature
            data:
              entity_id: !input climatiseur
              temperature: "{{ input.temperature_max_preservation }}"
