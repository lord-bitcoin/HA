blueprint:
  name: Gestion automatisée des climatiseurs par saison et température
  description: >
    Automatise la gestion des climatiseurs selon la saison, les plages horaires, 
    et les températures mesurées à l'intérieur et à l'extérieur.
    Active un mode "dry" si l'humidité mesurée sort des seuils définis, avec une marge dynamique 
    ajustable pour éviter un fonctionnement trop fréquent.
    Ajuste les tolérances d'humidité en fonction de l'humidité extérieure.
    Configure des comportements spécifiques pour la semaine ou le week-end.
  domain: automation
  input:
    climatiseur:
      name: Climatiseur
      selector:
        entity:
          domain: climate
    temperature_interieur:
      name: Capteur de température intérieure
      selector:
        entity:
          domain: sensor
          device_class: temperature
    temperature_exterieur:
      name: Capteur de température extérieure
      selector:
        entity:
          domain: sensor
          device_class: temperature
    humidite_interieur:
      name: Capteur d'humidité intérieure
      selector:
        entity:
          domain: sensor
          device_class: humidity
    humidite_exterieur:
      name: Capteur d'humidité extérieure
      selector:
        entity:
          domain: sensor
          device_class: humidity
    saisons_actives:
      name: Saisons actives
      description: Choisissez les saisons pendant lesquelles cette automatisation sera active.
      selector:
        select:
          multiple: true
          options:
            - printemps
            - ete
            - automne
            - hiver
    mode_climatisation:
      name: Mode de climatisation
      selector:
        select:
          options:
            - heat
            - cool
            - auto
    temperature_cible:
      name: Température cible
      selector:
        number:
          min: 18
          max: 26
          step: 0.5
          unit_of_measurement: °C
    heure_debut_jour:
      name: Heure de début de la journée
      selector:
        time:
    heure_fin_jour:
      name: Heure de fin de la journée
      selector:
        time:
    seuil_tolerance:
      name: Seuil de tolérance
      selector:
        number:
          min: 0
          max: 3
          step: 0.5
          unit_of_measurement: °C
    temperature_max_preservation:
      name: Température max tolérée
      selector:
        number:
          min: 20
          max: 30
          step: 0.5
          unit_of_measurement: °C
    humidite_min:
      name: Humidité minimale
      selector:
        number:
          min: 40
          max: 50
          step: 2.5
          unit_of_measurement: "%"
    humidite_max:
      name: Humidité maximale
      selector:
        number:
          min: 60
          max: 70
          step: 2.5
          unit_of_measurement: "%"
    mode_semaine_weekend:
      name: Mode semaine ou week-end
      selector:
        select:
          options:
            - semaine
            - weekend
mode: single
trigger:
  - platform: state
    entity_id: input.temperature_interieur
  - platform: state
    entity_id: input.humidite_interieur
  - platform: state
    entity_id: input.humidite_exterieur
  - platform: time_pattern
    minutes: "/30"
variables:
  mode_vacances_actif: "{{ is_state(input.mode_vacances, 'on') }}"
  mode_actuel: input.mode_climatisation
  temperature_cible: input.temperature_cible
  temperature_interieure: "{{ states(input.temperature_interieur) | float }}"
  temperature_exterieure: "{{ states(input.temperature_exterieur) | float }}"
  humidite_interieure: "{{ states(input.humidite_interieur) | float }}"
  humidite_exterieure: "{{ states(input.humidite_exterieur) | float }}"
  temperature_min: "{{ temperature_cible | float - (input.seuil_tolerance | float) }}"
  temperature_max: "{{ temperature_cible | float + (input.seuil_tolerance | float) }}"
  temperature_cible_preservation: >-
    {{
      [temperature_exterieure | float - 7, (input.temperature_max_preservation | float)] | min
    }}
  # Ajustement des tolérances d'humidité en fonction de l'humidité extérieure
  humidite_extreme_basse: "{{ input.humidite_min | float - 30 }}"
  humidite_extreme_haute: "{{ input.humidite_max | float + 30 }}"
  humidite_min_marge: >-
    {{ input.humidite_min | float + 2.5 }}
  humidite_max_marge: >-
    {{ input.humidite_max | float - 2.5 }}
  ajustement_humidite: >-
    {{
      -5 if humidite_exterieure <= (input.humidite_min | float - 30) else 
      5 if humidite_exterieure >= (input.humidite_max | float + 30) else 
      0
    }}
  humidite_min_finale: "{{ humidite_min_marge + ajustement_humidite }}"
  humidite_max_finale: "{{ humidite_max_marge + ajustement_humidite }}"

  # Définitions des saisons
  saison_actuelle: >-
    {% set today = now().date() %}
    {% if today >= today.replace(month=3, day=20) and today <= today.replace(month=6, day=20) %}
      printemps
    {% elif today >= today.replace(month=6, day=21) and today <= today.replace(month=9, day=22) %}
      ete
    {% elif today >= today.replace(month=9, day=23) and today <= today.replace(month=12, day=20) %}
      automne
    {% else %}
      hiver
    {% endif %}
conditions:
  - condition: template
    value_template: >-
      {{ states(input.temperature_interieur) not in ['unknown', 'unavailable'] }}
  - condition: template
    value_template: >-
      {{ states(input.temperature_exterieur) not in ['unknown', 'unavailable'] }}
  - condition: template
    value_template: >-
      {{ states(input.humidite_interieur) not in ['unknown', 'unavailable'] }}
  - condition: template
    value_template: >-
      {{ states(input.humidite_exterieur) not in ['unknown', 'unavailable'] }}
  - condition: template
    value_template: >-
      {{ states(input.climatiseur) not in ['unknown', 'unavailable'] }}
  - condition: template
    value_template: >-
      {% if mode_semaine_weekend == 'semaine' %}
        {{ now().weekday() in [0, 1, 2, 3, 4] }}
      {% else %}
        {{ now().weekday() in [5, 6] }}
      {% endif %}
  - condition: template
    value_template: >-
      {{ saison_actuelle in input.saisons_actives }}
action:
  - service: script.check_conditions_clim
    data:
      temperature_min: "{{ temperature_min }}"
      temperature_max: "{{ temperature_max }}"
      humidite_min: "{{ humidite_min_finale }}"
      humidite_max: "{{ humidite_max_finale }}"
      temperature_interieure: "{{ input.temperature_interieur }}"
      humidite_interieure: "{{ input.humidite_interieur }}"
  - condition: state
    entity_id: input_boolean.conditions_clim_ok
    state: "on"
  - choose:
      - conditions:
          - condition: template
            value_template: >-
              {{ temperature_interieure > temperature_max or temperature_interieure < temperature_min }}
          - condition: template
            value_template: >-
              {{ state_attr(input.climatiseur, 'hvac_mode') != mode_actuel }}
        sequence:
          - service: climate.set_hvac_mode
            data:
              entity_id: input.climatiseur
              hvac_mode: "{{ mode_actuel }}"
          - service: climate.set_temperature
            data:
              entity_id: input.climatiseur
              temperature: "{{ temperature_cible }}"
      - conditions:
          - condition: template
            value_template: >-
              {{ temperature_exterieure > (temperature_cible | float + 7) }}
          - condition: template
            value_template: >-
              {{ state_attr(input.climatiseur, 'hvac_mode') != 'cool' }}
        sequence:
          - service: climate.set_hvac_mode
            data:
              entity_id: input.climatiseur
              hvac_mode: "cool"
          - service: climate.set_temperature
            data:
              entity_id: input.climatiseur
              temperature: >-
                {{ [temperature_exterieure | float - 7, (input.temperature_max_preservation | float)] | min }}
      - conditions:
          - condition: template
            value_template: >-
              {{
                (humidite_interieure >= humidite_min and humidite_interieure <= humidite_max) and
                (temperature_interieure >= temperature_min and temperature_interieure <= temperature_max)
              }}
          - condition: template
            value_template: >-
              {{ state_attr(input.climatiseur, 'hvac_mode') != 'off' }}
        sequence:
          - service: climate.set_hvac_mode
            data:
              entity_id: input.climatiseur
              hvac_mode: "off"
      # Mode de préservation
      - conditions:
          - condition: template
            value_template: >-
              {{ temperature_exterieure > (temperature_interieure + 7) }}
          - condition: template
            value_template: >-
              {{ state_attr(input.climatiseur, 'hvac_mode') != 'cool' }}
        sequence:
          - service: climate.set_hvac_mode
            data:
              entity_id: input.climatiseur
              hvac_mode: "cool"
          - service: climate.set_temperature
            data:
              entity_id: input.climatiseur
              temperature: "{{ input.temperature_max_preservation }}"
