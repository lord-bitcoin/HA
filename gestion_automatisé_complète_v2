blueprint:
  name: Gestion Automatique de Climatisation
  description: Gestion intelligente de la climatisation selon la saison et les horaires
  domain: automation
  input:
    climate_entity:
      name: Climatiseur
      selector:
        entity:
          domain: climate
    indoor_temp_sensor:
      name: Capteur température intérieure
      selector:
        entity:
          domain: sensor
          device_class: temperature
    outdoor_temp_sensor:
      name: Capteur température extérieure
      selector:
        entity:
          domain: sensor
          device_class: temperature
    weekend_mode:
      name: Mode Weekend
      selector:
        boolean: {}
      default: true
    tolerance_threshold:
      name: Seuil de tolérance
      selector:
        number:
          min: 0.1
          max: 2.0
          step: 0.1
          unit_of_measurement: "°C"
      default: 0.5
    max_preservation_temp:
      name: Température maximale de préservation
      selector:
        number:
          min: 20
          max: 35
          step: 0.5
          unit_of_measurement: "°C"
      default: 30
    spring_mode:
      name: Mode Climatisation (Printemps)
      selector:
        select:
          options:
            - auto
            - cool
            - heat
      default: auto
    spring_day_temp:
      name: Température Jour (Printemps)
      selector:
        number:
          min: 18
          max: 30
          step: 0.5
      default: 23
    spring_night_temp:
      name: Température Nuit (Printemps)
      selector:
        number:
          min: 16
          max: 28
          step: 0.5
      default: 20
    spring_weekday_start:
      name: Début Journée Semaine (Printemps)
      selector:
        time: {}
      default: "07:00"
    spring_weekday_end:
      name: Fin Journée Semaine (Printemps)
      selector:
        time: {}
      default: "22:00"

trigger:
  - platform: state
    entity_id: !input "indoor_temp_sensor"
  - platform: time_pattern
    minutes: "/5"

condition:
  condition: template
  value_template: >-
    {% set current_temp = states(indoor_temp_sensor) | float %}
    {% set target_temp = states(spring_day_temp) | float %}
    {% set threshold = states(tolerance_threshold) | float %}
    {{ (current_temp - target_temp) | abs > threshold }}

action:
  - variables:
      hvac_mode: >-
        {% set month = now().month %}
        {% set day = now().day %}
        {% if (month == 3 and day >= 20) or month == 4 or month == 5 %}
          {{ states('input_select.spring_mode') }}
        {% elif month == 6 or month == 7 or month == 8 %}
          'cool'
        {% elif month == 12 or month == 1 or month == 2 %}
          'heat'
        {% else %}
          'auto'
        {% endif %}
      
      target_temp: >-
        {% set hour = now().hour %}
        {% if hour >= 7 and hour < 22 %}
          {{ states('input_number.spring_day_temp') }}
        {% else %}
          {{ states('input_number.spring_night_temp') }}
        {% endif %}

  - choose:
      - conditions:
          - condition: template
            value_template: >-
              {{ states(indoor_temp_sensor) | float > states(max_preservation_temp) | float }}
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input "climate_entity"
            data:
              hvac_mode: cool
          - service: climate.set_temperature
            target:
              entity_id: !input "climate_entity"
            data:
              temperature: "{{ states('input_number.max_preservation_temp') }}"
    default:
      - service: climate.turn_off
        target:
          entity_id: !input "climate_entity"

  - service: logbook.log
    data:
      name: Climatisation
      message: >-
        Mode: {{ states(climate_entity) }}, Temp. Cible: {{ target_temp }}°C
