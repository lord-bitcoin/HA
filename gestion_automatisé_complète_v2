blueprint:
  name: Gestion Automatique de Climatisation
  description: Gestion intelligente de la climatisation selon la saison et les horaires
  domain: automation
  source_url: "your_repository_url"
  input:
    climate_entity:
      name: Climatiseur
      selector:
        entity:
          domain: climate
    indoor_temp_sensor:
      name: Capteur température intérieure
      selector:
        entity:
          domain: sensor
          device_class: temperature
    outdoor_temp_sensor:
      name: Capteur température extérieure
      selector:
        entity:
          domain: sensor
          device_class: temperature
    weekend_mode:
      name: Mode Weekend
      selector:
        boolean:
      default: true
    tolerance_threshold:
      name: Seuil de tolérance
      selector:
        number:
          min: 0.1
          max: 2.0
          step: 0.1
          unit_of_measurement: "°C"
      default: 0.5
    max_preservation_temp:
      name: Température maximale de préservation
      selector:
        number:
          min: 20
          max: 35
          step: 0.5
          unit_of_measurement: "°C"
      default: 30

    # Configuration Printemps
    spring_mode:
      name: Mode Climatisation (Printemps)
      selector:
        select:
          options:
            - "auto"
            - "cool"
            - "heat"
      default: "auto"
    spring_day_temp:
      name: Température Jour (Printemps)
      selector:
        number:
          min: 18
          max: 30
          step: 0.5
      default: 23
    spring_night_temp:
      name: Température Nuit (Printemps)
      selector:
        number:
          min: 16
          max: 28
          step: 0.5
      default: 20
    spring_weekday_start:
      name: Début Journée Semaine (Printemps)
      selector:
        time:
      default: "07:00"
    spring_weekday_end:
      name: Fin Journée Semaine (Printemps)
      selector:
        time:
      default: "22:00"
    spring_weekend_start:
      name: Début Journée Weekend (Printemps)
      selector:
        time:
      default: "08:00"
    spring_weekend_end:
      name: Fin Journée Weekend (Printemps)
      selector:
        time:
      default: "23:00"

    # Configuration Été (similaire pour Automne et Hiver)
    summer_mode:
      name: Mode Climatisation (Été)
      selector:
        select:
          options:
            - "auto"
            - "cool"
            - "heat"
      default: "cool"
    # [Autres paramètres été...]

variables:
  current_season: >
    {% set month = now().month %}
    {% set day = now().day %}
    {% if (month == 3 and day >= 20) or month == 4 or month == 5 or (month == 6 and day < 21) %}
      spring
    {% elif (month == 6 and day >= 21) or month == 7 or month == 8 or (month == 9 and day < 23) %}
      summer
    {% elif (month == 9 and day >= 23) or month == 10 or month == 11 or (month == 12 and day < 21) %}
      autumn
    {% else %}
      winter
    {% endif %}
  
  is_weekend: >
    {% set weekday = now().isoweekday() %}
    {{ weekday >= 6 and input.weekend_mode }}

  current_period: >
    {% set current_time = now().strftime("%H:%M") %}
    {% set season = current_season %}
    {% if is_weekend %}
      {% set start_time = states(season + '_weekend_start') %}
      {% set end_time = states(season + '_weekend_end') %}
    {% else %}
      {% set start_time = states(season + '_weekday_start') %}
      {% set end_time = states(season + '_weekday_end') %}
    {% endif %}
    {{ 'day' if start_time <= current_time <= end_time else 'night' }}

trigger:
  - platform: state
    entity_id: !input indoor_temp_sensor
  - platform: time_pattern
    minutes: "/5"
  - platform: state
    entity_id: !input climate_entity

condition:
  - condition: template
    value_template: >
      {% set target_temp = states(current_season + '_' + current_period + '_temp') | float %}
      {% set current_temp = states(indoor_temp_sensor) | float %}
      {% set diff = current_temp - target_temp | abs %}
      {{ diff > tolerance_threshold or states(climate_entity) != desired_state }}

action:
  - variables:
      target_temp: "{{ states(current_season + '_' + current_period + '_temp') }}"
      current_mode: "{{ states(current_season + '_mode') }}"
  
  - choose:
      # Mode Préservation
      - conditions:
          - condition: template
            value_template: >
              {{ states(indoor_temp_sensor) | float > max_preservation_temp | float }}
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input climate_entity
            data:
              hvac_mode: "cool"
          - service: climate.set_temperature
            target:
              entity_id: !input climate_entity
            data:
              temperature: "{{ max_preservation_temp }}"
      
      # Mode Régulation
      - conditions:
          - condition: template
            value_template: >
              {% set current_temp = states(indoor_temp_sensor) | float %}
              {% set target = target_temp | float %}
              {% set threshold = tolerance_threshold | float %}
              {{ current_temp > target + threshold or current_temp < target - threshold }}
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input climate_entity
            data:
              hvac_mode: "{{ current_mode }}"
          - service: climate.set_temperature
            target:
              entity_id: !input climate_entity
            data:
              temperature: "{{ target_temp }}"
    
    # Mode Naturel (default)
    default:
      - service: climate.turn_off
        target:
          entity_id: !input climate_entity

  # Logging
  - service: logbook.log
    data:
      name: "Climatisation"
      message: >
        Mode: {{ states(climate_entity) }}, 
        Temp. Cible: {{ target_temp }}°C, 
        Temp. Actuelle: {{ states(indoor_temp_sensor) }}°C
