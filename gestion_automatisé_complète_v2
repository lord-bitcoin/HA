blueprint:
  name: "Gestion Automatique de Climatisation"
  description: "Gestion de climatisation par saison avec températures et modes adaptés"
  domain: automation
  input:
    climate_entity:
      name: "Climatiseur"
      selector:
        entity:
          domain: climate
    
    temp_sensor:
      name: "Capteur température"
      selector:
        entity:
          domain: sensor
          device_class: temperature

    # Configuration horaires
    day_start:
      name: "Début de journée"
      selector:
        time: {}
      default: "07:00:00"
    
    day_end:
      name: "Fin de journée"
      selector:
        time: {}
      default: "22:00:00"
    
    # Configuration Printemps
    spring_day_temp:
      name: "Température jour (Printemps)"
      selector:
        number:
          min: 18
          max: 24
          step: 0.5
          unit_of_measurement: °C
      default: 19

    spring_night_temp:
      name: "Température nuit (Printemps)"
      selector:
        number:
          min: 16
          max: 22
          step: 0.5
          unit_of_measurement: °C
      default: 17
    
    spring_mode:
      name: "Mode climatisation (Printemps)"
      selector:
        select:
          options:
            - auto
            - cool
            - heat
      default: auto

    # Configuration Été
    summer_day_temp:
      name: "Température jour (Été)"
      selector:
        number:
          min: 18
          max: 24
          step: 0.5
          unit_of_measurement: °C
      default: 21

    summer_night_temp:
      name: "Température nuit (Été)"
      selector:
        number:
          min: 16
          max: 22
          step: 0.5
          unit_of_measurement: °C
      default: 19
    
    summer_mode:
      name: "Mode climatisation (Été)"
      selector:
        select:
          options:
            - auto
            - cool
            - heat
      default: cool

    # Configuration Automne
    autumn_day_temp:
      name: "Température jour (Automne)"
      selector:
        number:
          min: 18
          max: 24
          step: 0.5
          unit_of_measurement: °C
      default: 19

    autumn_night_temp:
      name: "Température nuit (Automne)"
      selector:
        number:
          min: 16
          max: 22
          step: 0.5
          unit_of_measurement: °C
      default: 18
    
    autumn_mode:
      name: "Mode climatisation (Automne)"
      selector:
        select:
          options:
            - auto
            - cool
            - heat
      default: auto

    # Configuration Hiver
    winter_day_temp:
      name: "Température jour (Hiver)"
      selector:
        number:
          min: 18
          max: 24
          step: 0.5
          unit_of_measurement: °C
      default: 19

    winter_night_temp:
      name: "Température nuit (Hiver)"
      selector:
        number:
          min: 16
          max: 22
          step: 0.5
          unit_of_measurement: °C
      default: 18
    
    winter_mode:
      name: "Mode climatisation (Hiver)"
      selector:
        select:
          options:
            - auto
            - cool
            - heat
      default: heat
    
    max_temp:
      name: "Température maximale"
      selector:
        number:
          min: 20
          max: 30
          step: 0.5
          unit_of_measurement: °C
      default: 24

trigger:
  - platform: state
    entity_id: !input "temp_sensor"
  - platform: time_pattern
    minutes: "/5"

variables:
  current_season: >
    {% set month = now().month %}
    {% set day = now().day %}
    {% if (month == 3 and day >= 20) or month == 4 or month == 5 or (month == 6 and day < 21) %}
      spring
    {% elif (month == 6 and day >= 21) or month == 7 or month == 8 or (month == 9 and day < 23) %}
      summer
    {% elif (month == 9 and day >= 23) or month == 10 or month == 11 or (month == 12 and day < 21) %}
      autumn
    {% else %}
      winter
    {% endif %}

  is_daytime: >
    {% set current_time = now().strftime("%H:%M:%S") %}
    {% set day_start = states('input_datetime.day_start') %}
    {% set day_end = states('input_datetime.day_end') %}
    {{ current_time >= day_start and current_time <= day_end }}

  target_temp: >
    {% set season = current_season %}
    {% if is_daytime %}
      {% if season == "spring" %}
        {{ states(spring_day_temp) }}
      {% elif season == "summer" %}
        {{ states(summer_day_temp) }}
      {% elif season == "autumn" %}
        {{ states(autumn_day_temp) }}
      {% else %}
        {{ states(winter_day_temp) }}
      {% endif %}
    {% else %}
      {% if season == "spring" %}
        {{ states(spring_night_temp) }}
      {% elif season == "summer" %}
        {{ states(summer_night_temp) }}
      {% elif season == "autumn" %}
        {{ states(autumn_night_temp) }}
      {% else %}
        {{ states(winter_night_temp) }}
      {% endif %}
    {% endif %}

  current_mode: >
    {% if current_season == "spring" %}
      {{ states(spring_mode) }}
    {% elif current_season == "summer" %}
      {{ states(summer_mode) }}
    {% elif current_season == "autumn" %}
      {{ states(autumn_mode) }}
    {% else %}
      {{ states(winter_mode) }}
    {% endif %}

condition:
  - condition: template
    value_template: "{{ states(temp_sensor)|float > target_temp|float }}"

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ states(temp_sensor)|float > states(max_temp)|float }}"
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input "climate_entity"
            data:
              hvac_mode: cool
          - service: climate.set_temperature
            target:
              entity_id: !input "climate_entity"
            data:
              temperature: "{{ states(max_temp)|float }}"
    
    default:
      - service: climate.set_hvac_mode
        target:
          entity_id: !input "climate_entity"
        data:
          hvac_mode: "{{ current_mode }}"
      - service: climate.set_temperature
        target:
          entity_id: !input "climate_entity"
        data:
          temperature: "{{ target_temp|float }}"

  - service: logbook.log
    data:
      name: "Climatisation"
      message: "Mode: {{ current_mode }}, Saison: {{ current_season }}, Période: {{ 'Jour' if is_daytime else 'Nuit' }}, Température cible: {{ target_temp }}°C"
