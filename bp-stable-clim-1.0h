blueprint:
  name: Gestion automatique du climatiseur avec seuil de température
  description: Un blueprint pour ajuster automatiquement un climatiseur en fonction de la température mesurée.
  domain: automation
  input:
    temperature_entity:
      name: Capteur de température 
      selector:
        entity:
          domain: input_number
    climatiseur_entity:
      name: Entité du climatiseur
      selector:
        entity:
          domain: climate
    current_season:
      name: Input text de la saison actuelle
      selector:
        entity:
          domain: input_text
    selected_season:
      name: saison choisie
      selector:
        select:
          options:
            - "Toutes les saisons"
            - "Printemps"
            - "Été" 
            - "Automne"
            - "Hiver"
    schedule_entity:
      name: Schedule
      selector:
        entity:
          domain: schedule
    temperature_cible:
      name: Température cible
      selector:
        entity:
          domain: input_number
    seuil_de_tolerance: 
      name: Seuil de tolérance
      selector:
        entity:
          domain: input_number
          
trigger:
  - platform: state
    entity_id: !input temperature_entity
  - platform: time_pattern
    minutes: /15
  - platform: state 
    entity_id: !input schedule_entity

condition:
  - alias: "Vérification du schedule et de la saison"
    and:
      - condition: state
        entity_id: !input schedule_entity
        state: "on"
      - condition: state
        entity_id: !input current_season
        state: !input selected_season

action:
  - choose:
      # Condition : Si la température actuelle est supérieure au seuil supérieur
      - conditions:
          - condition: numeric_state
            entity_id: !input temperature_entity
            above: >
              {{ !input temperature_cible | float + !input seuil_de_tolerance | float }}
        sequence:
          # Activer le mode refroidissement
          - service: climate.set_hvac_mode
            target:
              entity_id: !input climatiseur_entity
            data:
              hvac_mode: cool
          - service: climate.set_temperature
            target:
              entity_id: !input climatiseur_entity
            data:
              temperature: >
                {{ !input temperature_cible | float + !input seuil_de_tolerance | float }}

      # Condition : Si la température actuelle est inférieure au seuil inférieur
      - conditions:
          - condition: numeric_state
            entity_id: !input temperature_entity
            below: >
              {{ !input temperature_cible | float - !input seuil_de_tolerance | float }}
        sequence:
          # Activer le mode chauffage
          - service: climate.set_hvac_mode
            target:
              entity_id: !input climatiseur_entity
            data:
              hvac_mode: heat
          - service: climate.set_temperature
            target:
              entity_id: !input climatiseur_entity
            data:
              temperature: >
                {{ !input temperature_cible | float - !input seuil_de_tolerance | float }}

      # Condition : Si la température est dans la plage de tolérance
      - conditions:
          - condition: numeric_state
            entity_id: !input temperature_entity
            above: >
              {{ !input temperature_cible | float - !input seuil_de_tolerance | float }}
            below: >
              {{ !input temperature_cible | float + !input seuil_de_tolerance | float }}
        sequence:
          # Mettre le climatiseur en mode auto
          - service: climate.set_hvac_mode
            target:
              entity_id: !input climatiseur_entity
            data:
              hvac_mode: auto
          - service: climate.set_fan_mode
            target:
              entity_id: !input climatiseur_entity
            data:
              fan_mode: auto


mode: restart
